HELPER org.mft.Tracer

######################
# Install Identifier #
######################

RULE IdentifierInstall
CLASS org.jgroups.stack.ProtocolStack
METHOD initProtocolStack
AT EXIT
IF TRUE
DO
  org.mft.Identifier.install($0);
ENDRULE

###############
# ALL up/down #
###############

#RULE logUp
#CLASS ^org.jgroups.stack.Protocol
#METHOD up
#NOCOMPILE
#AT ENTRY
#IF TRUE
#DO
#  checkpointWithClass("up>", $0)
#ENDRULE

#RULE logUp_exit
#CLASS ^org.jgroups.stack.Protocol
#METHOD up
#NOCOMPILE
#AT EXIT
#IF TRUE
#DO
#  checkpointWithClass("up<", $0)
#ENDRULE

#RULE logDown
#CLASS ^org.jgroups.stack.Protocol
#METHOD down
#NOCOMPILE
#AT ENTRY
#IF TRUE
#DO
#  checkpointWithClass("down>", $0)
#ENDRULE

#RULE logDown_exit
#CLASS ^org.jgroups.stack.Protocol
#METHOD down
#NOCOMPILE
#AT EXIT
#IF TRUE
#DO
#  checkpointWithClass("down<", $0)
#ENDRULE


##########
# TP/UDP #
##########
###TRANSFORMERED FOR JGROUPS 3.6.1.Final
RULE incomingDataUDP
CLASS org.jgroups.protocols.UDP$PacketReceiver
METHOD run
AFTER INVOKE DatagramSocket.receive
IF TRUE
DO
  incomingData($len);
ENDRULE

RULE incomingDataTCP
CLASS org.jgroups.blocks.cs.TcpConnection$Receiver
METHOD run
AFTER INVOKE DataInputStream.readFully
IF TRUE
DO
  incomingData($len);
ENDRULE


RULE discardMessages
CLASS ^java.util.concurrent.ThreadPoolExecutor
METHOD reject
AT ENTRY
IF TRUE
DO
  discardMessages(org.mft.MessageIdentifier368.getDataIdentifiers($1));
ENDRULE

RULE dispatchDataFailedVersion
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AT LINE 1673
IF TRUE
DO
  checkpoint("Failed version check")
ENDRULE

RULE dispatchDataFailedTarget
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AT LINE 1683
IF TRUE
DO
  checkpoint("Failed target check")
ENDRULE

RULE dispatchDataRejected
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AT LINE 1698
IF TRUE
DO
  checkpoint("Rejected" + $ex)
ENDRULE


### replacing dispatchData rule with dispatchDataBatch and dispatchDataSingleMessage
RULE dispatchDataBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
AT INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  forkSpan();
ENDRULE

RULE dispatchDataSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AT INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  forkSpan();
ENDRULE

### replacing dataDispatched rule with dataDispatchedBatch and dataDispatchedSingleMessage
RULE dataDispatchedBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
AFTER INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  unforkSpan();
ENDRULE

RULE dataDispatchedSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AFTER INVOKE java.util.concurrent.Executor.execute ALL
IF TRUE
DO
  unforkSpan();
ENDRULE

RULE incomingDispatchedBatch
CLASS org.jgroups.protocols.TP
METHOD handleMessageBatch
AT EXIT
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE

RULE incomingDispatchedSingleMessage
CLASS org.jgroups.protocols.TP
METHOD handleSingleMessage
AT EXIT
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE

#adding handling message for single message handler
RULE dataProcessingSingle2
CLASS org.jgroups.protocols.TP$SingleMessageHandler
METHOD run
AT INVOKE passMessageUp
IF TRUE
DO
  handlingMessage(org.mft.MessageIdentifier368.getMessageIdentifier($0.msg));
ENDRULE

RULE batchProcessingStart
CLASS org.jgroups.protocols.TP$BatchHandler
METHOD run
AT INVOKE passBatchUp
IF TRUE
DO
  batchProcessingStart(org.mft.MessageIdentifier368.getMessageIdentifiers($0.batch));
ENDRULE

RULE batchProcessingEnd
CLASS org.jgroups.protocols.TP$BatchHandler
METHOD run
AFTER INVOKE org.jgroups.protocols.TP.passBatchUp
IF TRUE
DO
  batchProcessingEnd();
ENDRULE

RULE sendMessageStart
CLASS org.jgroups.protocols.TP
METHOD send(org.jgroups.Message, org.jgroups.Address)
AT INVOKE org.jgroups.protocols.TP$Bundler.send
IF TRUE
DO
  threadHandoverStarted($@[1]);
ENDRULE

RULE writeMessage
CLASS org.jgroups.protocols.TP
METHOD writeMessage
AT EXIT
IF TRUE
DO
  outcomingStarted($1, org.mft.MessageIdentifier368.getMessageIdentifier($1));
ENDRULE

RULE writeMessageList
CLASS org.jgroups.protocols.TP
METHOD writeMessageList
AT EXIT
IF TRUE
DO
  outcomingStarted($4, org.mft.MessageIdentifier368.getMessageIdentifiers($4));
ENDRULE

RULE writeMessageFromSTQB
CLASS org.jgroups.protocols.TP$SimplifiedTransferQueueBundler
METHOD sendBundledMessages
AFTER INVOKE Message.writeToNoAddrs
IF TRUE
DO
  outcomingStarted($msg, org.mft.MessageIdentifier368.getMessageIdentifier($msg)
ENDRULE

RULE outcomingFinished
CLASS org.jgroups.protocols.TP
METHOD doSend
AT EXIT
IF TRUE
DO
  outcomingFinished();
ENDRULE

############
# JChannel #
############

RULE batchedMessageProcessingUpHandler
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.UpHandler.up
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE batchedMessageProcessingReceive
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.Receiver.receive
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE batchedMessageProcessedUpHandler
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.UpHandler.up
IF TRUE
DO
  batchPop()
ENDRULE

RULE batchedMessageProcessedReceive
CLASS org.jgroups.JChannel
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.Receiver.receive
IF TRUE
DO
  batchPop()
ENDRULE

######################
# Protocol (general) #
######################

RULE Protocol_batchedUpStart
CLASS ^org.jgroups.stack.Protocol
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getEventIdentifier($@[1]))
ENDRULE

RULE Protocol_batchedUpFinished
CLASS ^org.jgroups.stack.Protocol
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPop();
ENDRULE

############
# UNICAST* #
############

RULE UNICAST2_NonCausal
CLASS org.jgroups.protocols.UNICAST2
METHOD up(org.jgroups.Event)
#AT READ hdr.type
AFTER INVOKE getSrc
IF $hdr.type != 0 && $hdr.type != 4
DO
  setNonCausal();
  msgTag("UNICAST2");
ENDRULE

RULE UNICAST2_SendingAck
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
AT INVOKE sendAck
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg))
ENDRULE

RULE UNICAST2_SentAck
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
AFTER INVOKE sendAck
IF TRUE
DO
  batchPop();
ENDRULE


RULE UNICAST2_PassingUpBatch
CLASS org.jgroups.protocols.UNICAST2
METHOD removeAndPassUp
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE UNICAST2_PassedUpBatch
CLASS org.jgroups.protocols.UNICAST2
METHOD removeAndPassUp
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

RULE UNICAST2_BatchedOOBUpStart
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE UNICAST2_BatchedOOBUpFinished
CLASS org.jgroups.protocols.UNICAST2
METHOD handleBatchReceived
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.Event) ALL
IF TRUE
DO
  batchPop();
ENDRULE

RULE UNICAST_BatchedOOBUpStart
CLASS org.jgroups.protocols.UNICAST
METHOD handleBatchReceived
AT INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE UNICAST_BatchedOOBUpFinished
CLASS org.jgroups.protocols.UNICAST
METHOD handleBatchReceived
AFTER INVOKE org.jgroups.stack.Protocol.up
IF TRUE
DO
  batchPop();
ENDRULE

###########
# UNICAST3 #
###########

RULE UNICAST3_NonCausal
CLASS org.jgroups.protocols.UNICAST3
METHOD up(org.jgroups.Event)
AFTER INVOKE getSrc
IF $hdr.type != 0 && $hdr.type != 4
DO
  setNonCausal();
  msgTag("UNICAST3");
ENDRULE

RULE UNICAST3_SendingAck
CLASS org.jgroups.protocols.UNICAST3
METHOD handleBatchReceived
AT INVOKE UNICAST3.sendAck
IF TRUE
DO
# not a real batch, but we need to suppress the current one
  startNewBatch();
ENDRULE

RULE UNICAST3_SentAck
CLASS org.jgroups.protocols.UNICAST3
METHOD handleBatchReceived
AFTER INVOKE UNICAST3.sendAck
IF TRUE
DO
  endNewBatch();
ENDRULE


RULE UNICAST3_PassingUpBatch
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE UNICAST3_PassedUpBatch
CLASS org.jgroups.protocols.UNICAST3
METHOD deliverBatch
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

#RULE UNICAST3_BatchedOOBUpStart
#CLASS org.jgroups.protocols.UNICAST3
#METHOD deliverBatch
##AT INVOKE org.jgroups.stack.Protocol.up
#IF TRUE
#DO
#  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($batch.first()));
#ENDRULE

#RULE UNICAST3_BatchedOOBUpFinished
#CLASS org.jgroups.protocols.UNICAST3
#METHOD deliverBatch
##AFTER INVOKE org.jgroups.stack.Protocol.up
#IF TRUE
#DO
#  batchPop();
#ENDRULE

###########
# NAKACK2 #
###########

RULE NAKACK2_RetransmitReq
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD handleXmitReq
AT ENTRY
IF TRUE
DO
  setNonCausal();
ENDRULE

#Changing method from removeAndPassUp to deliverBatch
RULE NAKACK2_PassingUpBatch
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD deliverBatch
AT INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  startNewBatch();
ENDRULE

RULE NAKACK2_PassedUpBatch
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD deliverBatch
AFTER INVOKE org.jgroups.stack.Protocol.up(org.jgroups.util.MessageBatch) ALL
IF TRUE
DO
  endNewBatch();
ENDRULE

###########
# Request #
###########

RULE MarkRequest
CLASS org.jgroups.blocks.RequestCorrelator
METHOD sendRequest
AT INVOKE ConcurrentMap.putIfAbsent
IF TRUE
DO
  setMarkFromContext($3);
ENDRULE

RULE ResponseReceived
CLASS org.jgroups.blocks.Request
METHOD receiveResponse
AT ENTRY
IF TRUE
DO
  msgTag("RSP_" + getMark($0));
ENDRULE

RULE RemoveMark
CLASS org.jgroups.blocks.RequestCorrelator
METHOD removeEntry
AFTER INVOKE ConcurrentMap.remove
IF TRUE
DO
  removeMark($!);
ENDRULE

#############
# Discovery #
#############

RULE Discovery
CLASS org.jgroups.protocols.Discovery
METHOD up
AT LINE 299
IF TRUE
DO
  msgTag("Discovery");
ENDRULE

#######
# FD* #
#######

RULE FD_SOCK
CLASS org.jgroups.protocols.FD_SOCK
METHOD up
AT LINE 228
IF TRUE
DO
  msgTag("FD");
ENDRULE

#RULE FD_ALL
#CLASS org.jgroups.protocols.FD_ALL
#METHOD up
##AT LINE 187
#IF TRUE
#DO
#  msgTag("FD");
#ENDRULE

# without at line trigger
RULE FD_ALL
CLASS org.jgroups.protocols.FD_ALL
METHOD update
AT ENTRY
IF TRUE
DO
  msgTag("FD");
ENDRULE


##################
# VERIFY_SUSPECT #
##################

RULE VERIFY_SUSPECT
CLASS org.jgroups.protocols.VERIFY_SUSPECT
METHOD up
AT LINE 123
IF TRUE
DO
  msgTag("VERIFY");
ENDRULE

######
# FC #
######

RULE FlowControl_Request
CLASS org.jgroups.protocols.FlowControl
METHOD handleUpEvent
AT READ num_credit_requests_received
IF TRUE
DO
  msgTag("FC_Request");
ENDRULE

RULE FlowControl_Replenish
CLASS org.jgroups.protocols.FlowControl
METHOD handleUpEvent
AT INVOKE handleCredit
IF TRUE
DO
  msgTag("FC_Replenish");
ENDRULE

RULE FlowControl_BatchedHandleStart
CLASS org.jgroups.protocols.FlowControl
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.protocols.FlowControl.handleUpEvent
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE FlowControl_BatchedHandleFinished
CLASS org.jgroups.protocols.FlowControl
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.protocols.FlowControl.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE

RULE FC_BatchedHandleStart
CLASS org.jgroups.protocols.FC
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.protocols.FC.handleUpEvent
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE FC_BatchedHandleFinished
CLASS org.jgroups.protocols.FC
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.protocols.FC.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE


########
# RSVP #
########

RULE RSVP_ReqOnly
CLASS org.jgroups.protocols.RSVP
METHOD up
AT LINE 190
IF TRUE
DO
  msgTag("RSVP_ReqOnly");
ENDRULE

RULE RSVP_Resp
CLASS org.jgroups.protocols.RSVP
METHOD up
AT INVOKE handleResponse
IF TRUE
DO
  msgTag("RSVP_Resp");
ENDRULE


##########
# RELAY* #
##########

RULE RELAY2_BatchedHandleStart
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.protocols.relay.RELAY2.handleMessage
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE RELAY2_BatchedHandleFinished
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.protocols.relay.RELAY2.handleMessage
IF TRUE
DO
  batchPop();
ENDRULE

RULE RELAY2_BatchedDeliverStart
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.protocols.relay.RELAY2.deliver
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE RELAY2_BatchedDeliverFinished
CLASS org.jgroups.protocols.relay.RELAY2
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.protocols.relay.RELAY2.deliver
IF TRUE
DO
  batchPop();
ENDRULE

RULE RELAY_BatchedHandleStart
CLASS org.jgroups.protocols.relay.RELAY
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE org.jgroups.protocols.relay.RELAY.handleUpEvent
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE RELAY_BatchedHandleFinished
CLASS org.jgroups.protocols.relay.RELAY
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE org.jgroups.protocols.relay.RELAY.handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE

##########
# STABLE #
##########

RULE STABLE_BatchedHandleStart
CLASS org.jgroups.protocols.STABLE
METHOD up(org.jgroups.util.MessageBatch)
AT INVOKE handleUpEvent
IF TRUE
DO
  batchPush(org.mft.MessageIdentifier368.getMessageIdentifier($msg));
ENDRULE

RULE STABLE_BatchedHandleFinished
CLASS org.jgroups.protocols.STABLE
METHOD up(org.jgroups.util.MessageBatch)
AFTER INVOKE handleUpEvent
IF TRUE
DO
  batchPop();
ENDRULE

##########
# MERGE3 #
##########

RULE MERGE3_up
CLASS org.jgroups.protocols.MERGE3
METHOD up
AT LINE 265
IF TRUE
DO
  msgTag("MERGE3 " + $hdr)
ENDRULE

##########
# GMS #
##########

RULE GMS_up
CLASS org.jgroups.protocols.pbcast.GMS
METHOD up
AT LINE 872
IF TRUE
DO
  msgTag("GMS " + $hdr)
ENDRULE

#########
# DELAY #
#########

RULE DELAY_queue
CLASS org.jgroups.protocols.DELAY
METHOD down
AT INVOKE DelayQueue.add ALL
IF TRUE
DO
  threadHandoverStarted($@[1]);
ENDRULE

RULE DELAY_run
CLASS org.jgroups.protocols.DELAY$DelayedMessageHandler
METHOD run
AT INVOKE Protocol.down ALL
IF TRUE
DO
  threadHandoverSuccess($evt);
ENDRULE

RULE DELAY_run_exit
CLASS org.jgroups.protocols.DELAY$DelayedMessageHandler
METHOD run
AFTER INVOKE Protocol.down ALL
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE