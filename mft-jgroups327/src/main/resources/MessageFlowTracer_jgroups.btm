RULE incomingData
CLASS org.jgroups.protocols.UDP$PacketReceiver
METHOD run
HELPER org.jboss.qa.jdg.messageflow.Tracer
AFTER INVOKE DatagramSocket.receive
IF TRUE
DO
  incomingData($packet.getLength());
ENDRULE

RULE dataDispatched
CLASS org.jgroups.protocols.TP
METHOD receive
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  threadProcessingCompleted();
ENDRULE

RULE discardMessages
CLASS ^java.util.concurrent.ThreadPoolExecutor
METHOD reject
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  discardMessages(org.jboss.qa.jdg.messageflow.MessageIdentifier32.getDataIdentifiers($1));
ENDRULE

RULE messageHandlingStarted
CLASS org.jgroups.protocols.TP$IncomingPacket
METHOD handleMyMessage
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  forkSpan();
  handlingMessage(org.jboss.qa.jdg.messageflow.MessageIdentifier32.getMessageIdentifier($1));
ENDRULE

RULE messageHandlingFinished
CLASS org.jgroups.protocols.TP$IncomingPacket
METHOD handleMyMessage
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  unforkSpan();
ENDRULE

RULE sendMessageStart
CLASS org.jgroups.protocols.TP
METHOD send
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  outcomingStarted(org.jboss.qa.jdg.messageflow.MessageIdentifier32.getMessageIdentifier($1));
ENDRULE

RULE sendMessageEnd
CLASS org.jgroups.protocols.TP
METHOD send
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT EXIT
IF TRUE
DO
  outcomingFinished();
ENDRULE

############
# UNICAST* #
############

RULE UNICAST2_NonCausal
CLASS org.jgroups.protocols.UNICAST2
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 417
IF $hdr.type != 0 && $hdr.type != 4
DO
  setNonCausal();
  msgTag("UNICAST2");
ENDRULE

###########
# NAKACK2 #
###########

RULE NAKACK2_RetransmitReq
CLASS org.jgroups.protocols.pbcast.NAKACK2
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 578
IF TRUE
DO
  setNonCausal();
ENDRULE

###########
# Request #
###########

RULE MarkRequest
CLASS org.jgroups.blocks.Request
METHOD execute
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  setMarkFromContext($0.completed);
ENDRULE

RULE ResponseReceived
CLASS org.jgroups.blocks.Request
METHOD receiveResponse
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  msgTag("RSP_" + getMark($0.completed));
ENDRULE

RULE RequestFinalized
CLASS org.jgroups.blocks.Request
METHOD finalize
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT ENTRY
IF TRUE
DO
  removeMark($0.completed);
ENDRULE

#############
# Discovery #
#############

RULE Discovery
CLASS org.jgroups.protocols.Discovery
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 361
IF TRUE
DO
  msgTag("Discovery");
ENDRULE

#######
# FD* #
#######

RULE FD_SOCK
CLASS org.jgroups.protocols.FD_SOCK
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 206
IF TRUE
DO
  msgTag("FD");
ENDRULE

RULE FD_ALL
CLASS org.jgroups.protocols.FD_ALL
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 174
IF TRUE
DO
  msgTag("FD");
ENDRULE

##################
# VERIFY_SUSPECT #
##################

RULE VERIFY_SUSPECT
CLASS org.jgroups.protocols.VERIFY_SUSPECT
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 111
IF TRUE
DO
  msgTag("VERIFY");
ENDRULE

######
# FC #
######

RULE FlowControl_Request
CLASS org.jgroups.protocols.FlowControl
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 379
IF TRUE
DO
  msgTag("FC_Request");
ENDRULE

RULE FlowControl_Replenish
CLASS org.jgroups.protocols.FlowControl
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 375
IF TRUE
DO
  msgTag("FC_Replenish");
ENDRULE

########
# RSVP #
########

RULE RSVP_ReqOnly
CLASS org.jgroups.protocols.RSVP
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 176
IF TRUE
DO
  msgTag("RSVP_ReqOnly");
ENDRULE

RULE RSVP_Resp
CLASS org.jgroups.protocols.RSVP
METHOD up
HELPER org.jboss.qa.jdg.messageflow.Tracer
AT LINE 179
IF TRUE
DO
  msgTag("RSVP_Resp");
ENDRULE